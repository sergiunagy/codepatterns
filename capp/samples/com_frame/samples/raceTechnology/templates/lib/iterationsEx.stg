//
// iterationsEx.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// The templates collected in this library file extend the concept of
// iterations found in library file lib/iterations.stg.
//   See lib/iterations.stg for additional hints how to use.
//   You need to include just this file to benefit from all iterations.
//
// Copyright (C) 2023 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

import "lib/iterations.stg"

// The iterations finally apply a user-specified template T to all visited objects. This
// templated is expanded by reference. Usually, it'll be passed in as a literal, i.e. the
// template name in double quotes.
//   The reference to the template is the last argument of all iterations, the formal name
// of this argument is T.
//   The required template T normally has a single argument: The visited object. Only the
// iterations along the signals of a parent object use a second argument for T; T gets a
// string attribute as second argument kind, which is either "normal", "muxSel" or "muxed",
// i.e. three out of the four possible choices of the filter mux of the signal iterations.
// Attribute kind tells the applied template what matched against the filter. This is
// relevant only if the filter mux was set to "all". T can use the templates
// <strcmpNormal.(kind)>, <strcmpMuxSel.(kind)> or <strcmpMuxed.(kind)> to test, of which
// kind the signal is.

// By convention all iterations use argument scoping to access the embracing elements,
// which are closer to the root of everything, which is the cluster. This convention means
// to have hard-coded names for these elements. The leaf of the iteration, the applied
// user-specified template T, needs to be aware of this and needs to use these given names.
// The following names apply:
//   cluster: The union of all buses
//   bus:     A bus, i.e. the representation of a single CAN network database
//   frame:   A CAN frame or message
//   pdu:     A PDU of the frame. For CAN this is a one by one relation
//   muxSSet: The set of multiplexed signals, which do all have the same multiplex switch
//            value
//   signal:  A signal

// All iterations along frames, PDUs and signals use the attribute dir (for direction) to
// filter in- and outbound objects. The attribute will usually be passed in as a literal,
// i.e. a string in double-quotes. The following values are recognized for attribute dir:
//   sent:     outbound objects only
//   received: inbound objects only
//   both:     all objects, which are either in- or outbound
//   foreign:  all objects, which are neither in- nor outbound
//   loopback: Objects, which are sent by the given network node, but which it listens to
//             at the same time
//   all:      all objects, including those which are not transmitted by the given network
//             node. This value will probably be useful only for reporting and overview
//             documents

// All iterations along signals besides those of a multiplexed signal set use the attribute
// mux (for multiplexing) to filter either normal or multiplexed signals. This filter is
// AND combined with the direction filter; both filters must match. The attribute will
// usually be passed in as a literal, i.e. a string in double-quotes. The following values
// are recognized for attribute mux:
//   normal: Only the normal signals match
//   muxSel: Only the multiplex selector signal matches
//   muxed:  Only the multiplexed signals match. The matching signals are not reasonably
//           grouped in sets. If you need this grouping you will only iterate along
//           multiplexed signal sets
//   all:    All signals, the union of those before. The normal signals of a PDU are
//           visited prior to the multiplex selector signal of the PDU prior to the
//           signals of the multiplexed signal sets of the PDU. This enables the use of
//           iteration along "all" signals for pack and unpack operations.


// Iterate along all frames. This can be done at the root of all, the cluster, or one can
// enter the iteration selectively in a sub-element, i.e., a bus.
//   filter is the name of a template, which selects the visited frames. If it expands to
// "true" or "1" for a given frame then the frame is visited, i.e., template T is applied
// to that frame. Otherwise it MUST expand to either "false" or "0" and the frame is
// ignored. Other expansion results of the filter template will lead to a runtime error
// during code generation. (The filter result is stored in the calculator, which can accept
// only integral numbers or Boolean constants. Bad filter results will be reported like:
// "xxx doesn't evaluate to a valid numeric operation.")
iterateFramesOfClusterEx(cluster,filter,T) ::= "<cluster.busAry:iterateFramesOfBusEx(filter,T)>"
iterateFramesOfBusEx(bus,filter,T) ::= "<bus.frameAry:applyTToFrameEx(filter,T)>"
applyTToFrameEx(frame,filter,T) ::= "<info.calc.({iterFilterResult_set_<(filter)(frame)>})><if(info.calc.iterFilterResult_isNE)><(T)(frame)><endif>"


// More frame iterations: Sorted iteration tailored to a bus. All frames of the bus are
// visited in the selected order.
//   CAUTION: Different to the basic, unsorted iteration iterateFramesOfBus, which has the
// same arguments will these templates required access to an attribute cluster by scoping.
// Normally, this will be the case if the templates of this group and its naming
// conventions are applied. However, only selecting an alternative name for the first
// argument of the root template will invalidate these iterations. A way out would be the
// explicit argument cluster for these templates but this would mean inconsistent look and
// feel of the iteration templates and is considered even worse.
iterateFramesOfBusByNameEx(bus,filter,T) ::= "<cluster.frameByNameAry:filterByBusAndApplyTToFrameRefEx(bus)>"
iterateFramesOfBusByNameReverse(bus,filter,T) ::= "<reverse(cluster.frameByNameAry):filterByBusAndApplyTToFrameRefEx(bus)>"
iterateFramesOfBusByIdEx(bus,filter,T) ::= "<cluster.frameByIdAry:filterByBusAndApplyTToFrameRefEx(bus)>"
iterateFramesOfBusByIdReverseEx(bus,filter,T) ::= "<reverse(cluster.frameByIdAry):filterByBusAndApplyTToFrameRefEx(bus)>"
filterByBusAndApplyTToFrameRefEx(frameRef,bus) ::= <<
<if(frameRef.busIs.(bus.name))><applyTToFrameRefEx(frameRef)><endif>
>>
applyTToFrameRefEx(frameRef) ::= "<frameRef.bus:{bus|<applyTToFrameEx(frameRef.frame,filter,T)>}>"


// Iterate along all PDUs. This can be done at the root of all, the cluster, or one can
// enter the iteration selectively in a sub-element, i.e., a bus.
//   filter is the name of a template, which selects the visited PDUs. If it expands to
// "true" or "1" for a given PDU then the PDU is visited, i.e., template T is applied
// to that PDU. Otherwise it MUST expand to either "false" or "0" and the PDU is
// ignored. Other expansion results of the filter template will lead to a runtime error
// during code generation. (The filter result is stored in the calculator, which can accept
// only integral numbers or Boolean constants. Bad filter results will be reported like:
// "xxx doesn't evaluate to a valid numeric operation.")
iteratePdusOfClusterEx(cluster,filter,T) ::= "<cluster.busAry:iteratePdusOfBusEx(filter,T)>"
iteratePdusOfBusEx(bus,filter,T) ::= "<bus.frameAry:iteratePdusOfFrameEx(filter,T)>"
iteratePdusOfFrameEx(frame,filter,T) ::= "<frame.pduAry:applyTToPduEx(filter,T)>"
applyTToPduEx(pdu,filter,T) ::= "<info.calc.({iterFilterResult_set_<(filter)(pdu)>})><if(info.calc.iterFilterResult_isNE)><(T)(pdu)><endif>"


// Iterate along all signals. This can be done at the root of all, the
// cluster, or one can enter the iteration selectively in a sub-element, i.e., a bus, a
// frame, a PDU or a multiplexed signal set.
//   CAUTION: Different to the standard iterations, the extended vesrion doesn't take
// arguments for transmission direction and multiplexing. This used to be a kind of built-in
// filtering. With the extended iterations, it is considered more to the point to leave
// these kinds of decision to the filter template, which is passed to the iteration.
//   As for the standard iteration, it is guaranteed that the normal signals of a PDU are
// handled prior to the multiplex selector signal of the PDU prior to the signals of the
// multiplexed signal sets of the PDU.
iterateSignalsOfClusterEx(cluster,T) ::= "<cluster.busAry:iterateSignalsOfBusEx(T)>"
iterateSignalsOfBusEx(bus,T) ::= "<bus.frameAry:iterateSignalsOfFrameEx(T)>"
iterateSignalsOfFrameEx(frame,T) ::= "<frame.pduAry:iterateSignalsOfPduEx(T)>"
iterateSignalsOfPduEx(pdu,T) ::= <<
<pdu.signalAry:applyTToSignalEx(T,"normal")><\\>
<pdu.muxSelector:applyTToSignalEx(T,"muxSel")><\\>
<pdu.muxSignalSetAry:iterateSignalsOfMuxSSetEx(T)>
>>
iterateSignalsOfMuxSSetEx(muxSSet,T) ::= "<muxSSet.signalAry:applyTToSignalEx(T,\"muxed\")>"
applyTToSignalEx(signal,T,kind) ::= "<(T)(signal,kind)>"
